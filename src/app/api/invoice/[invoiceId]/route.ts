import { prisma } from '@/lib/prisma';
import { NextResponse } from 'next/server';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { formatCurrency } from '@/utils/formatCurrency';
import { CurrencySign } from '@/types/types';

interface Params {
  params: Promise<{ invoiceId: string }>;
}

export async function GET(req: Request, { params }: Params) {
  const { invoiceId } = await params;

  const data = await prisma.invoice.findUnique({
    where: { id: invoiceId },
    select: {
      invoiceName: true,
      invoiceNumber: true,
      currency: true,
      fromName: true,
      fromEmail: true,
      fromStreet: true,
      fromCity: true,
      fromState: true,
      fromPinCode: true,
      clientName: true,
      clientEmail: true,
      clientAddress: true,
      date: true,
      dueDate: true,
      invoiceItemDescription: true,
      invoiceItemQuantity: true,
      invoiceItemRate: true,
      total: true,
      note: true,
    },
  });

  if (!data) {
    return NextResponse.json({ error: 'Invoice not found' }, { status: 404 });
  }

  const pdf = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'letter', // Letter size (216 x 279 mm)
  });

  // Header Section
  pdf.setFont('helvetica', 'bold');
  pdf.setFontSize(20);
  pdf.text(data.invoiceName!, 20, 15);
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  pdf.text('Generated by: BillCraft', 20, 20);

  // Invoice Details Section
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Invoice Details', 20, 30);
  pdf.setFont('helvetica', 'normal');
  pdf.text(`Invoice Number: #${data.invoiceNumber}`, 20, 35);
  pdf.text(
    `Date: ${new Intl.DateTimeFormat('en-IN', { dateStyle: 'long' }).format(data.date)}`,
    20,
    40,
  );
  pdf.text(
    `Due Date: ${new Intl.DateTimeFormat('en-IN', { dateStyle: 'long' }).format(data.dueDate)}`,
    20,
    45,
  );

  // From Section
  pdf.setFont('helvetica', 'bold');
  pdf.text('From:', 20, 55);
  pdf.setFont('helvetica', 'normal');
  pdf.text(
    [
      data.fromName!,
      data.fromEmail!,
      data.fromStreet!,
      `${data.fromCity!}, ${data.fromState!} - ${data.fromPinCode}`,
    ],
    20,
    60,
  );

  // Client Section
  pdf.setFont('helvetica', 'bold');
  pdf.text('Bill To:', 130, 55);
  pdf.setFont('helvetica', 'normal');
  pdf.text([data.clientName!, data.clientEmail!, data.clientAddress!], 130, 60);

  // Item Table Section
  const tableData = [
    ['Description', 'Quantity', 'Rate', 'Total'], // Header row
    [
      data.invoiceItemDescription!,
      data.invoiceItemQuantity.toString(),
      formatCurrency({
        amount: data.invoiceItemRate,
        currency: data.currency as CurrencySign,
      }),
      formatCurrency({
        amount: data.total,
        currency: data.currency as CurrencySign,
      }),
    ],
  ];

  // Configure autoTable
  autoTable(pdf, {
    head: [tableData[0]], // Header row
    body: [
      [
        data.invoiceItemDescription!, // Description
        data.invoiceItemQuantity.toString(), // Quantity
        formatCurrency({
          amount: data.invoiceItemRate,
          currency: data.currency as CurrencySign,
        }), // Rate
        formatCurrency({
          amount: data.total,
          currency: data.currency as CurrencySign,
        }), // Total
      ],
    ],
    startY: 80, // Start position on the page
    headStyles: {
      fillColor: [150, 150, 150], // Dark Grey header
      textColor: [255, 255, 255], // White text
      fontSize: 10,
      lineColor: [120, 120, 120], // Border color
      halign: 'center', // Center align header text
    },
    bodyStyles: {
      fillColor: [245, 245, 245], // Light Grey body rows
      textColor: [0, 0, 0], // Black text
      lineColor: [120, 120, 120], // Border color
      lineWidth: 0.5, // Border width,
      halign: 'center',
    },
    alternateRowStyles: {
      fillColor: [255, 255, 255], // White for alternate rows
    },
    styles: {
      fontSize: 10,
      cellPadding: 4,
      lineWidth: 0.5,
      lineColor: [200, 200, 200],
    },
  });

  // Access `finalY` from `pdf.lastAutoTable`
  const tableY = (pdf as any).lastAutoTable.finalY || 80;

  // Total Section
  pdf.setFont('helvetica', 'bold');
  pdf.text('Total:', 170, tableY + 10, { align: 'right' });
  pdf.text(
    formatCurrency({
      amount: data.total,
      currency: data.currency as CurrencySign,
    }),
    190,
    tableY + 10,
    { align: 'right' },
  );

  // Notes Section
  if (data.note) {
    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(10);
    pdf.text('Note:', 20, tableY + 20);
    pdf.text(data.note, 20, tableY + 25, { maxWidth: 160 });
  }

  // Footer Section
  pdf.setFontSize(8);
  pdf.setFont('helvetica', 'italic');
  pdf.text('Thank you for your business!', 20, 270);
  pdf.text('For inquiries, contact: support@billcraft.com', 20, 275);

  // Generate PDF Buffer
  const pdfBuffer = Buffer.from(pdf.output('arraybuffer'));

  return new NextResponse(pdfBuffer, {
    headers: {
      'Content-Type': 'application/pdf',
      'Content-Disposition': 'inline',
    },
  });
}
